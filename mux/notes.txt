Tests about multiplexing

References:
- https://stackoverflow.com/questions/6786284/gcc-atomic-built-in-functions
- https://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Atomic-Builtins.html

TODO investigate lock-free queues lock-free such as
https://github.com/mitghi/lfqueue

Context 1 producer 1 consumer BUFFER

Scenarios:

1. Producer -  gets index adds element in buf[0]
2. Producer -  uses __sync_fetch_and_add to get next index
3. Consumer -  uses __sync_fetch_and_add to *set* next index to 1
4. Consumer -  copies memory of index - 1 buf[0], buf[0] cannot be ready
5. Consumer -  bzeros memory
6. Producer -  uses __sync_fetch_and_add set next index to 2
7. Producer -  fills buf[2]
8. Consumer -  uses  __sync_fetch_and_add and set index to 3
9. Consumer -  reads  buf[2] -> buf can be not ready


Problem 1: Consumer increase index to avoid  that the producer overwrites data
that is currently be read

Problem 2: Consumer can consume data that is not ready

Problem 3: Dead consumer

Problem 4: Consumer dies during processing

Problem 5: Integer overflow

Problem 6: Consumer consumes to much

bzero advantage to avoid to mix old and new data?
------------------------------------------------------------------------------
// Missed consummed elements

Producer produces first element

1. __sync_fetch_and_add for next index  : index = 1
2. memcpy data to buffer at index 1
3. set end marker at fixed position

//Producer produces second element

4. __sync_fetch_and_add for the next index: index = 2
5. memcpy data to buffer at index 2
6 set end  marker at fixed position

//Producer produces  third element

7. __sync_fetch_and_add for index: index = 3
8 memcpy data to buffer at index 3
9. set end marker at fixed position

//Consumer starts consuming

10 uses __sync_fetch_and_add to get next index: index = 4
11 consumer consumes index at position 3 (received index -1)
12 consumer  memory at position 3
13 bzeros memory

// Problem: element 2 and 1 were not consumed
// consumer has to remind what last element it consumed

-------------------------------------------------------------------------------
// Index 0 is never filled

1. Consumer __sync_fetch_and_add -> index = 1
2. Consumer memcpy at index 0
-------------------------------------------------------------------------------
// Consumer fetches empty data
1. Consumer __sync_fetch_and_add -> index = 2
2. memcpy  at index 1
//No data was produced
3. Consumer bzeros memory
4. Consumer __sync_fetch_and_add -> index =3
5. memcpy at index 2
// No data was produced

Consumer must know if no data was produced

-------------------------------------------------------------------------------
//Alternative to memcpy  adjust pointer to the next read call such that
// the data goes directly in the shared memory segment
-------------------------------------------------------------------------------
